Reqs for chatting system 
    -- start chatting page 
    -- two person chatting system 
    -- links for both of them 
    -- Qr code both people 
    -- secret code for both of them 
    -- secret code matching system and error system 
    -- send and recieve message 
    -- end the session 
    -- someone end the page accidentally 
        -- the url should work
        -- the person can open the url 
        -- same landindg page 
        -- put the ssecret code in 
        -- the chat should be displayed as it is 
    -- the chat destroyed only after ending the chat and a timeout system to detect inactivity 


database -
	-- mongodb
        -- chatid (hash) 
        -- message as hash (key) : name as (val)
	-- redis 

database schema  -- 
    -- example 
       --  key (time_stamp for hash + username)
            -- ex - 5DEC20231209ABHI 
       -- value (message send )
            -- "Hi"

    Full storage system
        -- two people name ABHI and ANNY 
        -- timestamp+name can be the unique indetifer
        -- mesaage_hash = 23AHi7
        -- ex - 23AHi7 {
        5DEC2023120912ABHI : "HI",
        5DEC2023120913ANNY : "HEY",
        5DEC2023120914ABHI : "what u doing",
        5DEC2023120925ABHI : "Any plans this weekend ?",
        5DEC2023120925ANNY : "Nothing rn"

        }

        -- one other option is like this 
        -- exampel , use hash for the indentifier

        session_id = "23AHi7"
        {
            [
                {
                    "sender": "User1",
                    "timestamp": "2024-05-23T15:01:23.456789",
                    "message": "Hello!"
                },
                {
                    "sender": "User2",
                    "timestamp": "2024-05-23T15:02:10.123456",
                    "message": "Hi there!"
                },
                {
                    "sender": "User1",
                    "timestamp": "2024-05-23T15:03:45.789012",
                    "message": "How are you?"
                },
                {
                    "sender": "User2",
                    "timestamp": "2024-05-23T15:04:30.456789",
                    "message": "I'm good, thanks! How about you?"
                }
            ]
        }




Font end -- 
    -- Chat start page 
        -- input First participant name
        -- input Second participant name
        -- start chat button 
        -- first participant short url 
        -- second participant short url 
        -- first participant qr code 
        -- second participant qr code
        -- first participannt secret code 
        -- second partcipant secret code
    
    -- Enter chat page for one perosn  
        -- Hello Name should be written
        -- enter the secret code 
        -- Get in button

    -- chat page 
        -- show the opposite name in above 
        -- input field box 
        -- send button 
        -- Endchat button (both sides of partcipant)
            -- if any one clicks that button display chat has ended to other person 
            -- 







Backend design thinking 
    -- Db is not needed as the chat record is not stored 
    -- Chat record also should be destroyed after the chat eneded 
    -- The session has to ennd as well 
    
    -- detailed design 
        -- chat start page 
            -- after clicking the start chat button on the page
            -- session_id generated by hash 
                -- two hash for url as well 
            -- generate the db in the mongodb for messages 
            -- two link ? 
                -- genration of page 
                    db for page generation
                    seesion_id = "hash"
                    {
                        name1 = "Dummy1"
                        name2 = "Dummy2"
                        name1_link = "url_hash"
                        name2_link = "url_hash"
                        secret_code1 = "secret_code"
                        secret_code2 = "secret_code"
                        
                    }
                -- this data can be retrived with db file and can be used for validation purpose
        
        -- chat landing page 
            -- get the name from temp Db
                -- display hello 
                -- message 
                --enter secret code 
                -- validate the login 














Reusable components -- 
	-- hashing system
	-- qr code generation 
	-- tiny-url generation 
	-- input and output fields




-- develop
	-- chat start system
	-- message sending system
	-- message receiving system 
	-- chat ending system 
	-- dynamic chat popping and UI changing 
	-- notification service 
	-- Timeout system
	-- chat storage system 
        -- order of chat message is imp


look into -- 

    -- chat storage systems (sql , nosql any)
    -- rabbitmq 
    -- kafka
